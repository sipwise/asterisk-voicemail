From: Sipwise Development Team <support@sipwise.com>
Date: Mon, 21 Feb 2022 14:17:23 +0100
Subject: sipwise_vm_find_user_by_alias

---
 apps/app_voicemail.c | 67 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 67 insertions(+)

diff --git a/apps/app_voicemail.c b/apps/app_voicemail.c
index ba41f21..cb3db9b 100644
--- a/apps/app_voicemail.c
+++ b/apps/app_voicemail.c
@@ -1129,6 +1129,9 @@ static char emaildateformat[32] = "%A, %B %d, %Y at %r";
 static char pagerdateformat[32] = "%A, %B %d, %Y at %r";
 
 /* Forward declarations - generic */
+#ifdef ODBC_STORAGE
+static struct ast_vm_user *find_user_realtime_by_alias(struct ast_vm_user *ivm, const char *context, const char *alias);
+#endif
 static int open_mailbox(struct vm_state *vms, struct ast_vm_user *vmu, int box);
 static int close_mailbox(struct vm_state *vms, struct ast_vm_user *vmu);
 static int advanced_options(struct ast_channel *chan, struct ast_vm_user *vmu, struct vm_state *vms, int msg, int option, signed char record_gain);
@@ -1800,7 +1803,12 @@ static struct ast_vm_user *find_user(struct ast_vm_user *ivm, const char *contex
 	AST_LIST_UNLOCK(&users);
 	if (!vmu) {
 		ast_log(LOG_DEBUG,"call find_user_realtime for '%s@%s'\n", mailbox, context);
+		// agranig: always find user by alias
+#ifdef ODBC_STORAGE
+		vmu = find_user_realtime_by_alias(ivm, context, mailbox);
+#else
 		vmu = find_user_realtime(ivm, context, mailbox);
+#endif
 	}
 	if (!vmu && !ast_strlen_zero(aliasescontext)) {
 		struct alias_mailbox_mapping *mapping;
@@ -4095,6 +4103,65 @@ bail:
 	return x - 1;
 }
 
+#ifdef ODBC_STORAGE
+static struct ast_vm_user *find_user_realtime_by_alias(struct ast_vm_user *ivm, const char *context, const char *alias)
+{
+	int res;
+	char mailbox[256] = "";
+	char *argv[] = { (char*) alias };
+	char *sql = "select distinct(vmusers.mailbox) from kamailio.voicemail_users vmusers " \
+		"left join provisioning.voip_subscribers pvs on vmusers.customer_id = pvs.uuid " \
+		"left join provisioning.voip_dbaliases vda on pvs.id = vda.subscriber_id " \
+		"where vda.username = ?";
+	struct generic_prepare_struct gps = { .sql = sql, .argc = 1, .argv = argv };
+	char *sql_uuid = "select distinct(mailbox) from kamailio.voicemail_users "\
+		"where customer_id = ?";
+	struct generic_prepare_struct gps_uuid = { .sql = sql_uuid, .argc = 1, .argv = argv };
+	struct odbc_obj *obj = NULL;
+	SQLHSTMT stmt = NULL;
+
+	obj = ast_odbc_request_obj(odbc_database, 0);
+	stmt = ast_odbc_prepare_and_execute(obj, generic_prepare, &gps);
+	if (!stmt) {
+		ast_log(LOG_WARNING, "SQL Execute error!\n[%s]\n\n", sql);
+		ast_odbc_release_obj(obj);
+		return NULL;
+	}
+	res = SQLFetch(stmt);
+	if ((res != SQL_SUCCESS) && (res != SQL_SUCCESS_WITH_INFO)) {
+		ast_log(LOG_NOTICE, "Failed to fetch mailbox for alias '%s', falling back to uuid search\n", alias);
+		SQLFreeHandle (SQL_HANDLE_STMT, stmt);
+
+		stmt = ast_odbc_prepare_and_execute(obj, generic_prepare, &gps_uuid);
+		if (!stmt) {
+			ast_log(LOG_WARNING, "SQL Execute error!\n[%s]\n\n", sql_uuid);
+			ast_odbc_release_obj(obj);
+			return NULL;
+		}
+		res = SQLFetch(stmt);
+		if ((res != SQL_SUCCESS) && (res != SQL_SUCCESS_WITH_INFO)) {
+			ast_log(LOG_NOTICE, "Failed to fetch mailbox for alias '%s' via uuid\n", alias);
+			SQLFreeHandle (SQL_HANDLE_STMT, stmt);
+
+			ast_odbc_release_obj(obj);
+			return NULL;
+		}
+	}
+	res = SQLGetData(stmt, 1, SQL_CHAR, mailbox, sizeof(mailbox), NULL);
+	if ((res != SQL_SUCCESS) && (res != SQL_SUCCESS_WITH_INFO)) {
+		ast_log(LOG_WARNING, "SQL Get Data error!\n[%s]\n\n", sql);
+		SQLFreeHandle (SQL_HANDLE_STMT, stmt);
+		ast_odbc_release_obj(obj);
+		return NULL;
+	}
+	SQLFreeHandle(SQL_HANDLE_STMT, stmt);
+	ast_odbc_release_obj(obj);
+
+	ast_log(LOG_NOTICE, "Found mailbox '%s' for alias '%s'\n", mailbox, alias);
+	return find_user_realtime(ivm, context, mailbox);
+}
+#endif
+
 /*!
  * \brief Determines the highest message number in use for a given user and mailbox folder.
  * \param vmu
