--- a/apps/app_voicemail.c
+++ b/apps/app_voicemail.c
@@ -48,7 +48,7 @@
 	<member name="FILE_STORAGE" displayname="Storage of Voicemail using filesystem">
 		<conflict>ODBC_STORAGE</conflict>
 		<conflict>IMAP_STORAGE</conflict>
-		<defaultenabled>yes</defaultenabled>
+		<defaultenabled>no</defaultenabled>
 		<support_level>core</support_level>
 	</member>
 	<member name="ODBC_STORAGE" displayname="Storage of Voicemail using ODBC">
@@ -56,7 +56,7 @@
 		<depend>ltdl</depend>
 		<conflict>IMAP_STORAGE</conflict>
 		<conflict>FILE_STORAGE</conflict>
-		<defaultenabled>no</defaultenabled>
+		<defaultenabled>yes</defaultenabled>
 		<support_level>core</support_level>
 	</member>
 	<member name="IMAP_STORAGE" displayname="Storage of Voicemail using IMAP4">
@@ -747,7 +747,8 @@
  * Use ast_vm_user_destroy() to free one of these structures. */
 struct ast_vm_user {
 	char context[AST_MAX_CONTEXT];   /*!< Voicemail context */
-	char mailbox[AST_MAX_EXTENSION]; /*!< Mailbox id, unique within vm context */
+	char mailbox[AST_MAX_EXTENSION]; /*!< granig: the mailbox uuid */
+    char dialed_num[AST_MAX_EXTENSION]; /*!< granig: the mailbox number */
 	char password[80];               /*!< Secret pin code, numbers only */
 	char fullname[80];               /*!< Full name, for directory app */
 	char email[80];                  /*!< E-mail address */
@@ -1512,6 +1513,12 @@
 		} else if (!strcasecmp(var->name, "emailbody")) {
 			ast_free(retval->emailbody);
 			retval->emailbody = ast_strdup(substitute_escapes(var->value));
+        } else if (!strcasecmp(var->name, "customer_id")) { /* granig: use uuid instead of number */
+            ast_copy_string(retval->mailbox, var->value, sizeof(retval->mailbox));
+            // ast_log (LOG_DEBUG,"setting mailbox to '%s'\n", var->value);
+        } else if (!strcasecmp(var->name, "mailbox")) { /* granig: but save number for announcement */
+            ast_copy_string(retval->dialed_num, var->value, sizeof(retval->dialed_num));
+            // ast_log (LOG_DEBUG,"setting dialed_num to '%s'\n", var->value);
 #ifdef IMAP_STORAGE
 		} else if (!strcasecmp(var->name, "imapuser")) {
 			ast_copy_string(retval->imapuser, var->value, sizeof(retval->imapuser));
@@ -1594,6 +1601,7 @@
 			var = ast_load_realtime("voicemail", "mailbox", mailbox, "context", context, SENTINEL);
 		}
 		if (var) {
+            ast_log (LOG_DEBUG,"call apply_options_full\n");
 			apply_options_full(retval, var);
 			ast_variables_destroy(var);
 		} else { 
@@ -1644,8 +1652,10 @@
 			ast_set2_flag(vmu, !ivm, VM_ALLOCED);
 			AST_LIST_NEXT(vmu, list) = NULL;
 		}
-	} else
+	} else {
+        ast_log (LOG_DEBUG,"call find_user_realtime for '%s@%s'\n", mailbox, context);
 		vmu = find_user_realtime(ivm, context, mailbox);
+    }
 	AST_LIST_UNLOCK(&users);
 	return vmu;
 }
@@ -2905,7 +2915,7 @@
 		return -1;
 	}
 
-	create_dirpath(vms->curdir, sizeof(vms->curdir), vmu->context, vms->username, vms->curbox);
+	create_dirpath(vms->curdir, sizeof(vms->curdir), vmu->context, vmu->mailbox, vms->curbox);
 
 	/* Check Quota */
 	if  (box == 0)  {
@@ -4672,7 +4682,8 @@
 	snprintf(num, sizeof(num), "%d", msgnum);
 	pbx_builtin_setvar_helper(ast, "VM_MSGNUM", num);
 	pbx_builtin_setvar_helper(ast, "VM_CONTEXT", context);
-	pbx_builtin_setvar_helper(ast, "VM_MAILBOX", mailbox);
+    pbx_builtin_setvar_helper(ast, "VM_MAILBOX", vmu->dialed_num);
+    pbx_builtin_setvar_helper(ast, "VM_UUID", mailbox);
 	pbx_builtin_setvar_helper(ast, "VM_CALLERID", (!ast_strlen_zero(cidname) || !ast_strlen_zero(cidnum)) ?
 		ast_callerid_merge(callerid, sizeof(callerid), cidname, cidnum, NULL) : "an unknown caller");
 	pbx_builtin_setvar_helper(ast, "VM_CIDNAME", (!ast_strlen_zero(cidname) ? cidname : "an unknown caller"));
@@ -5403,7 +5414,7 @@
 	return ast_strftime(s, len, "%a %b %e %r UTC %Y", &tm);
 }
 
-static int invent_message(struct ast_channel *chan, char *context, char *ext, int busy, char *ecodes)
+static int invent_message(struct ast_channel *chan, char *context, char *ext, char *dialed_num, int busy, char *ecodes)
 {
 	int res;
 	char fn[PATH_MAX];
@@ -5426,12 +5437,21 @@
 	} else {
 		/* Dispose just in case */
 		DISPOSE(fn, -1);
+        /*
 		res = ast_stream_and_wait(chan, "vm-theperson", ecodes);
 		if (res)
+        {
+            ast_log(LOG_WARNING, "failed to stream/wait vm-theperson\n");
 			return res;
-		res = ast_say_digit_str(chan, ext, ecodes, ast_channel_language(chan));
+        }
+        */
+        ast_log(LOG_DEBUG, "stream/wait dialed_num\n");
+		res = ast_say_digit_str(chan, dialed_num, ecodes, ast_channel_language(chan));
 		if (res)
+        {
+            ast_log(LOG_WARNING, "failed to stream/wait '%s'\n", dialed_num);
 			return res;
+        }
 	}
 	res = ast_stream_and_wait(chan, busy ? "vm-isonphone" : "vm-isunavail", ecodes);
 	return res;
@@ -5514,6 +5534,7 @@
 					break;
 				}
 				*newmsgs = atoi(rowdata);
+                ast_log(LOG_DEBUG, "inboxcount/new: %d\n", *newmsgs);
 				SQLFreeHandle (SQL_HANDLE_STMT, stmt);
 			}
 
@@ -5535,6 +5556,7 @@
 				}
 				SQLFreeHandle(SQL_HANDLE_STMT, stmt);
 				*oldmsgs = atoi(rowdata);
+                ast_log(LOG_DEBUG, "inboxcount/old: %d\n", *oldmsgs);
 			}
 
 			if (urgentmsgs) {
@@ -5914,6 +5936,7 @@
 	}
 
 	if (!ast_strlen_zero(externnotify)) {
+        ast_log(LOG_DEBUG, "Perform inboxcount on context '%s'\n", ext_context);
 		if (inboxcount2(ext_context, &urgentvoicemails, &newvoicemails, &oldvoicemails)) {
 			ast_log(AST_LOG_ERROR, "Problem in calculating number of voicemail messages available for extension %s\n", extension);
 		} else {
@@ -6325,9 +6348,15 @@
 		ast_free(tmp);
 		return res;
 	}
+
+    /* granig: */
+    //ast_log(LOG_DEBUG, "granig: '%s' has uuid '%s'\n", ext, vmu->mailbox);
+    //ast_copy_string(ext, vmu->mailbox, AST_MAX_EXTENSION);
+    /* eog */
+
 	/* Setup pre-file if appropriate */
 	if (strcmp(vmu->context, "default"))
-		snprintf(ext_context, sizeof(ext_context), "%s@%s", ext, vmu->context);
+		snprintf(ext_context, sizeof(ext_context), "%s@%s", vmu->mailbox, vmu->context);
 	else
 		ast_copy_string(ext_context, vmu->mailbox, sizeof(ext_context));
 
@@ -6337,16 +6366,16 @@
 	   Depending on the flag set in options.
 	*/
 	if (ast_test_flag(options, OPT_BUSY_GREETING)) {
-		snprintf(prefile, sizeof(prefile), "%s%s/%s/busy", VM_SPOOL_DIR, vmu->context, ext);
+		snprintf(prefile, sizeof(prefile), "%s%s/%s/busy", VM_SPOOL_DIR, vmu->context, vmu->mailbox);
 	} else if (ast_test_flag(options, OPT_UNAVAIL_GREETING)) {
-		snprintf(prefile, sizeof(prefile), "%s%s/%s/unavail", VM_SPOOL_DIR, vmu->context, ext);
+		snprintf(prefile, sizeof(prefile), "%s%s/%s/unavail", VM_SPOOL_DIR, vmu->context, vmu->mailbox);
 	}
 	/* Set the path to the tmpfile as
 		VM_SPOOL_DIR/context/ext/temp
 	   and attempt to create the folder structure.
 	*/
-	snprintf(tempfile, sizeof(tempfile), "%s%s/%s/temp", VM_SPOOL_DIR, vmu->context, ext);
-	if ((res = create_dirpath(tmpdir, sizeof(tmpdir), vmu->context, ext, "tmp"))) {
+	snprintf(tempfile, sizeof(tempfile), "%s%s/%s/temp", VM_SPOOL_DIR, vmu->context, vmu->mailbox);
+	if ((res = create_dirpath(tmpdir, sizeof(tmpdir), vmu->context, vmu->mailbox, "tmp"))) {
 		ast_log(AST_LOG_WARNING, "Failed to make directory (%s)\n", tempfile);
 		ast_free(tmp);
 		return -1;
@@ -6358,7 +6387,7 @@
 	DISPOSE(tempfile, -1);
 	/* It's easier just to try to make it than to check for its existence */
 #ifndef IMAP_STORAGE
-	create_dirpath(dir, sizeof(dir), vmu->context, ext, "INBOX");
+	create_dirpath(dir, sizeof(dir), vmu->context, vmu->mailbox, "INBOX");
 #else
 	snprintf(dir, sizeof(dir), "%simap", VM_SPOOL_DIR);
 	if (mkdir(dir, VOICEMAIL_DIR_MODE) && errno != EEXIST) {
@@ -6419,7 +6448,7 @@
 #ifdef ODBC_STORAGE
 		int success = 
 #endif
-			RETRIEVE(prefile, -1, ext, context);
+			RETRIEVE(prefile, -1, vmu->mailbox, context);
 		if (ast_fileexists(prefile, NULL, NULL) > 0) {
 			if (ast_streamfile(chan, prefile, ast_channel_language(chan)) > -1) 
 				res = ast_waitstream(chan, ecodes);
@@ -6432,7 +6461,7 @@
 #endif
 		} else {
 			ast_debug(1, "%s doesn't exist, doing what we can\n", prefile);
-			res = invent_message(chan, vmu->context, ext, ast_test_flag(options, OPT_BUSY_GREETING), ecodes);
+			res = invent_message(chan, vmu->context, vmu->mailbox, vmu->dialed_num, ast_test_flag(options, OPT_BUSY_GREETING), ecodes);
 		}
 		DISPOSE(prefile, -1);
 		if (res < 0) {
@@ -6530,7 +6559,7 @@
 			ast_free(tmp);
 			return -1;
 		}
-		if (!(vms = get_vm_state_by_mailbox(ext, context, 0))) {
+		if (!(vms = get_vm_state_by_mailbox(vmu->mailbox, context, 0))) {
 		/* It is possible under certain circumstances that inboxcount did not
 		 * create a vm_state when it was needed. This is a catchall which will
 		 * rarely be used.
@@ -6594,7 +6623,7 @@
 				S_COR(ast_channel_caller(chan)->id.number.valid, ast_channel_caller(chan)->id.number.str, NULL),
 				"Unknown");
 			ast_store_realtime("voicemail_data",
-				"origmailbox", ext,
+				"origmailbox", vmu->mailbox,
 				"context", ast_channel_context(chan),
 				"macrocontext", ast_channel_macrocontext(chan),
 				"exten", ast_channel_exten(chan),
@@ -6634,7 +6663,7 @@
 				"origtime=%ld\n"
 				"category=%s\n"
 				"msg_id=%s\n",
-				ext,
+				vmu->mailbox,
 				ast_channel_context(chan),
 				ast_channel_macrocontext(chan), 
 				ast_channel_exten(chan),
@@ -6743,7 +6772,7 @@
 						char dfn[PATH_MAX];
 						int x;
 						/* It's easier just to try to make it than to check for its existence */
-						create_dirpath(urgdir, sizeof(urgdir), vmu->context, ext, "Urgent");
+						create_dirpath(urgdir, sizeof(urgdir), vmu->context, vmu->mailbox, "Urgent");
 						x = last_message_index(vmu, urgdir) + 1;
 						make_file(sfn, sizeof(sfn), dir, msgnum);
 						make_file(dfn, sizeof(dfn), urgdir, x);
@@ -6892,7 +6921,7 @@
 	return res;
 #else
 	char *dir = vms->curdir;
-	char *username = vms->username;
+	char *username = vmu->mailbox;
 	char *context = vmu->context;
 	char sfn[PATH_MAX];
 	char dfn[PATH_MAX];
@@ -8662,7 +8691,7 @@
 	snprintf(vms->vmbox, sizeof(vms->vmbox), "vm-%s", vms->curbox);
 
 	/* Faster to make the directory than to check if it exists. */
-	create_dirpath(vms->curdir, sizeof(vms->curdir), vmu->context, vms->username, vms->curbox);
+	create_dirpath(vms->curdir, sizeof(vms->curdir), vmu->context, vmu->mailbox, vms->curbox);
 
 	/* traverses directory using readdir (or select query for ODBC) */
 	count_msg = count_messages(vmu, vms->curdir);
@@ -9794,7 +9823,7 @@
 	char prefile[256];
 	
 	/* Notify the user that the temp greeting is set and give them the option to remove it */
-	snprintf(prefile, sizeof(prefile), "%s%s/%s/temp", VM_SPOOL_DIR, vmu->context, vms->username);
+	snprintf(prefile, sizeof(prefile), "%s%s/%s/temp", VM_SPOOL_DIR, vmu->context, vmu->mailbox);
 	if (ast_test_flag(vmu, VM_TEMPGREETWARN)) {
 		RETRIEVE(prefile, -1, vmu->mailbox, vmu->context);
 		if (ast_fileexists(prefile, NULL, NULL) > 0) {
@@ -9916,9 +9945,11 @@
 				} else {
 					res = ast_play_and_wait(chan, "vm-undelete");
 				}
+                /* agranig
 				if (!res) {
 					res = ast_play_and_wait(chan, "vm-toforward");
 				}
+                */
 				if (!res) {
 					res = ast_play_and_wait(chan, "vm-savemessage");
 				}
@@ -9996,7 +10027,7 @@
 
 	/* If forcename is set, have the user record their name */
 	if (ast_test_flag(vmu, VM_FORCENAME)) {
-		snprintf(prefile, sizeof(prefile), "%s%s/%s/greet", VM_SPOOL_DIR, vmu->context, vms->username);
+		snprintf(prefile, sizeof(prefile), "%s%s/%s/greet", VM_SPOOL_DIR, vmu->context, vmu->mailbox);
 		if (ast_fileexists(prefile, NULL, NULL) < 1) {
 			cmd = play_record_review(chan, "vm-rec-name", prefile, maxgreet, fmtc, 0, vmu, &duration, NULL, NULL, record_gain, vms, NULL, NULL);
 			if (cmd < 0 || cmd == 't' || cmd == '#')
@@ -10006,14 +10037,14 @@
 
 	/* If forcegreetings is set, have the user record their greetings */
 	if (ast_test_flag(vmu, VM_FORCEGREET)) {
-		snprintf(prefile, sizeof(prefile), "%s%s/%s/unavail", VM_SPOOL_DIR, vmu->context, vms->username);
+		snprintf(prefile, sizeof(prefile), "%s%s/%s/unavail", VM_SPOOL_DIR, vmu->context, vmu->mailbox);
 		if (ast_fileexists(prefile, NULL, NULL) < 1) {
 			cmd = play_record_review(chan, "vm-rec-unv", prefile, maxgreet, fmtc, 0, vmu, &duration, NULL, NULL, record_gain, vms, NULL, NULL);
 			if (cmd < 0 || cmd == 't' || cmd == '#')
 				return cmd;
 		}
 
-		snprintf(prefile, sizeof(prefile), "%s%s/%s/busy", VM_SPOOL_DIR, vmu->context, vms->username);
+		snprintf(prefile, sizeof(prefile), "%s%s/%s/busy", VM_SPOOL_DIR, vmu->context, vmu->mailbox);
 		if (ast_fileexists(prefile, NULL, NULL) < 1) {
 			cmd = play_record_review(chan, "vm-rec-busy", prefile, maxgreet, fmtc, 0, vmu, &duration, NULL, NULL, record_gain, vms, NULL, NULL);
 			if (cmd < 0 || cmd == 't' || cmd == '#')
@@ -10096,15 +10127,15 @@
 			retries = 0;
 		switch (cmd) {
 		case '1': /* Record your unavailable message */
-			snprintf(prefile, sizeof(prefile), "%s%s/%s/unavail", VM_SPOOL_DIR, vmu->context, vms->username);
+			snprintf(prefile, sizeof(prefile), "%s%s/%s/unavail", VM_SPOOL_DIR, vmu->context, vmu->mailbox);
 			cmd = play_record_review(chan, "vm-rec-unv", prefile, maxgreet, fmtc, 0, vmu, &duration, NULL, NULL, record_gain, vms, NULL, NULL);
 			break;
 		case '2':  /* Record your busy message */
-			snprintf(prefile, sizeof(prefile), "%s%s/%s/busy", VM_SPOOL_DIR, vmu->context, vms->username);
+			snprintf(prefile, sizeof(prefile), "%s%s/%s/busy", VM_SPOOL_DIR, vmu->context, vmu->mailbox);
 			cmd = play_record_review(chan, "vm-rec-busy", prefile, maxgreet, fmtc, 0, vmu, &duration, NULL, NULL, record_gain, vms, NULL, NULL);
 			break;
 		case '3': /* Record greeting */
-			snprintf(prefile, sizeof(prefile), "%s%s/%s/greet", VM_SPOOL_DIR, vmu->context, vms->username);
+			snprintf(prefile, sizeof(prefile), "%s%s/%s/greet", VM_SPOOL_DIR, vmu->context, vmu->mailbox);
 			cmd = play_record_review(chan, "vm-rec-name", prefile, maxgreet, fmtc, 0, vmu, &duration, NULL, NULL, record_gain, vms, NULL, NULL);
 			break;
 		case '4':  /* manage the temporary greeting */
@@ -10148,7 +10179,7 @@
 				}
 			}
 			if (strcmp(newpassword, newpassword2)) {
-				ast_log(AST_LOG_NOTICE, "Password mismatch for user %s (%s != %s)\n", vms->username, newpassword, newpassword2);
+				ast_log(AST_LOG_NOTICE, "Password mismatch for user %s (%s != %s)\n", vmu->mailbox, newpassword, newpassword2);
 				cmd = ast_play_and_wait(chan, vm_mismatch);
 				if (!cmd) {
 					cmd = ast_play_and_wait(chan, vm_pls_try_again);
@@ -10172,7 +10203,7 @@
 			break;
 		default:
 			cmd = 0;
-			snprintf(prefile, sizeof(prefile), "%s%s/%s/temp", VM_SPOOL_DIR, vmu->context, vms->username);
+			snprintf(prefile, sizeof(prefile), "%s%s/%s/temp", VM_SPOOL_DIR, vmu->context, vmu->mailbox);
 			RETRIEVE(prefile, -1, vmu->mailbox, vmu->context);
 			if (ast_fileexists(prefile, NULL, NULL)) {
 				cmd = ast_play_and_wait(chan, "vm-tmpexists");
@@ -10233,7 +10264,7 @@
 	}
 
 	ast_test_suite_event_notify("TEMPGREETING", "Message: entering temp greeting options");
-	snprintf(prefile, sizeof(prefile), "%s%s/%s/temp", VM_SPOOL_DIR, vmu->context, vms->username);
+	snprintf(prefile, sizeof(prefile), "%s%s/%s/temp", VM_SPOOL_DIR, vmu->context, vmu->mailbox);
 	while ((cmd >= 0) && (cmd != 't')) {
 		if (cmd)
 			retries = 0;
@@ -11103,7 +11134,8 @@
 			vms.repeats = 0;
 			while ((cmd > -1) && (cmd != 't') && (cmd != '#')) {
 				switch (cmd) {
-				case '1': /* Reply */
+                /* Reply */
+				/* case '1':
 					if (vms.lastmsg > -1 && !vms.starting) {
 						cmd = advanced_options(chan, vmu, &vms, vms.curmsg, 1, record_gain);
 						if (cmd == ERROR_LOCK_PATH || cmd == OPERATOR_EXIT) {
@@ -11115,7 +11147,10 @@
 					}
 					cmd = 't';
 					break;
-				case '2': /* Callback */
+                */
+                /* Callback */
+                /*
+				case '2':
 					if (!vms.starting)
 						ast_verb(3, "Callback Requested\n");
 					if (!ast_strlen_zero(vmu->callback) && vms.lastmsg > -1 && !vms.starting) {
@@ -11132,7 +11167,9 @@
 					}
 					cmd = 't';
 					break;
-				case '3': /* Envelope */
+                */
+                /* Envelope */
+				case '3':
 					if (vms.lastmsg > -1 && !vms.starting) {
 						cmd = advanced_options(chan, vmu, &vms, vms.curmsg, 3, record_gain);
 						if (cmd == ERROR_LOCK_PATH) {
@@ -11144,7 +11181,9 @@
 					}
 					cmd = 't';
 					break;
-				case '4': /* Dialout */
+                /* Dialout */
+                /*
+				case '4':
 					if (!ast_strlen_zero(vmu->dialout)) {
 						cmd = dialout(chan, vmu, NULL, vmu->dialout);
 						if (cmd == 9) {
@@ -11156,8 +11195,10 @@
 					}
 					cmd = 't';
 					break;
-
-				case '5': /* Leave VoiceMail */
+                */
+                /* Leave VoiceMail */
+                /*
+				case '5':
 					if (ast_test_flag(vmu, VM_SVMAIL)) {
 						cmd = forward_message(chan, context, &vms, vmu, vmfmts, 1, record_gain, 0);
 						if (cmd == ERROR_LOCK_PATH || cmd == OPERATOR_EXIT) {
@@ -11169,28 +11210,32 @@
 					}
 					cmd = 't';
 					break;
-
+                */
 				case '*': /* Return to main menu */
 					cmd = 't';
 					break;
 
 				default:
 					cmd = 0;
+                    /*
 					if (!vms.starting) {
 						cmd = ast_play_and_wait(chan, "vm-toreply");
 					}
 					if (!ast_strlen_zero(vmu->callback) && !vms.starting && !cmd) {
 						cmd = ast_play_and_wait(chan, "vm-tocallback");
 					}
+                    */
 					if (!cmd && !vms.starting) {
 						cmd = ast_play_and_wait(chan, "vm-tohearenv");
 					}
+                    /*
 					if (!ast_strlen_zero(vmu->dialout) && !cmd) {
 						cmd = ast_play_and_wait(chan, "vm-tomakecall");
 					}
 					if (ast_test_flag(vmu, VM_SVMAIL) && !cmd) {
 						cmd = ast_play_and_wait(chan, "vm-leavemsg");
 					}
+                    */
 					if (!cmd) {
 						cmd = ast_play_and_wait(chan, "vm-starmain");
 					}
@@ -11340,7 +11385,9 @@
 #endif
 			break;
 
-		case '8': /* Forward the current message */
+        /* Forward the current message */
+        /*
+		case '8':
 			if (vms.lastmsg > -1) {
 				cmd = forward_message(chan, context, &vms, vmu, vmfmts, 0, record_gain, in_urgent);
 				if (cmd == ERROR_LOCK_PATH) {
@@ -11348,12 +11395,7 @@
 					goto out;
 				}
 			} else {
-				/* Check if we were listening to urgent
-				   messages.  If so, go to regular new messages
-				   instead of saying "no more messages"
-				*/
 				if (in_urgent == 1 && vms.newmessages > 0) {
-					/* Check for new messages */
 					in_urgent = 0;
 					res = close_mailbox(&vms, vmu);
 					if (res == ERROR_LOCK_PATH)
@@ -11371,6 +11413,7 @@
 				}
 			}
 			break;
+        */
 		case '9': /* Save message to folder */
 			ast_test_suite_event_notify("SAVEMSG", "Message: saving message %d\r\nVoicemail: %d", vms.curmsg, vms.curmsg);
 			if (vms.curmsg < 0 || vms.curmsg > vms.lastmsg) {
@@ -11464,6 +11507,7 @@
 				cmd = 0;
 			break;
 		case '0': /* Mailbox options */
+            ast_log(LOG_DEBUG, "setting options for '%s'", vmu->mailbox);
 			cmd = vm_options(chan, vmu, &vms, vmfmts, record_gain);
 			if (useadsi)
 				adsi_status(chan, &vms);
