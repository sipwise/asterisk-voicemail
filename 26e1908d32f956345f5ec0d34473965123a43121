{
  "comments": [
    {
      "key": {
        "uuid": "ba51214e_2391bf99",
        "filename": "debian/control",
        "patchSetId": 6
      },
      "lineNbr": 5,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2016-12-20T21:44:58Z",
      "side": 1,
      "message": "Hm, I\u0027m not really happy about this hardcoded build-dependency, if there\u0027s just a minor update in Debian causing the version to 1:13.12.2~dfsg-3 it would require a change on our side too. Do we have any better options?",
      "revId": "26e1908d32f956345f5ec0d34473965123a43121",
      "serverId": "85315e57-5f03-49c3-83f8-201ae2313a75",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba51214e_23bffffc",
        "filename": "debian/control",
        "patchSetId": 6
      },
      "lineNbr": 5,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2016-12-20T22:27:14Z",
      "side": 1,
      "message": "Hmm actually I think there\u0027s a solution that might solve all of our problems?\n\nAFAIK we do not have the same restriction as in Debian that our builds cannot access the network right?\n\nSo, I\u0027d do the following. Remove the baseline .c files. And keep a set of quilt patch stacks for each upstream release we support. Then, during the build, I\u0027d do something like:\n\n  apt-get source asterisk\n  cp asterisk-*/app/app_voicemail.c . (or wherever the file might be in the upstream repo)\n  and the «quilt push -a» but configured to force 0 fuzz.\n\nThis should be pretty safe and fail whenever the patch does not apply any longer, then we can simply remove the hardcoded version, and let the builds fail whenever there\u0027s a new upstream version. If we consider the 0 fuzz patches still unsafe, we can refresh them with more than 3-lines of context say 10 or whatever.\n\nI think this would solve all the problems we discussed with Victor and Kirill.",
      "parentUuid": "ba51214e_2391bf99",
      "revId": "26e1908d32f956345f5ec0d34473965123a43121",
      "serverId": "85315e57-5f03-49c3-83f8-201ae2313a75",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba51214e_6338d7a0",
        "filename": "debian/control",
        "patchSetId": 6
      },
      "lineNbr": 5,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2016-12-20T22:36:49Z",
      "side": 1,
      "message": "We expect our packages to build without network, but we\u0027ve exceptions, quoting modules/jenkins/files/pbuilderrc from puppet-sipwise.git:\n\nif [ \"$JOB_NAME\" \u003d \"docker-deb-pkg-binaries\" ] || \\\n   [ \"$JOB_NAME\" \u003d \"repoapi-binaries\" ] || \\\n   [ \"$JOB_NAME\" \u003d \"ngcp-rtcengine-binaries\" ] || \\\n   [[ \"$JOB_NAME\" \u003d~ ^comx(-sip|-xmpp|-fileshare-service|)-binaries$ ]] ; then\n  USENETWORK\u003dyes\nfi\n\nWe for sure could make an exception for asterisk too, so that shouldn\u0027t hinder us.\n\nInteresting approach, for sure :)\n\nBTW, do you have any idea how to hardcode a specific version? Would something like \"asterisk-dev (\u003e\u003d 1:13.12.2~), asterisk-dev (\u003c\u003c 1:13.13)\" a) work + b) improve our situation from your PoV?",
      "parentUuid": "ba51214e_23bffffc",
      "revId": "26e1908d32f956345f5ec0d34473965123a43121",
      "serverId": "85315e57-5f03-49c3-83f8-201ae2313a75",
      "unresolved": false
    }
  ]
}